<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
  
  <!-- Filter debug log messages to the console -->
  <appender name="CONSOLE-DEBUG" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%-5p - %-30c{1} - %m%n"/>
    </layout>
    <filter class="org.apache.log4j.varia.LevelMatchFilter">
      <!-- 
        With the acceptOnMatch set to true, the LevelToMatchFilter returns
        Filter.ACCEPT for debug statements and prints them; it returns 
        Filter.NEUTRAL for all other statements (i.e., unmatched statements)
      -->
      <param name="levelToMatch" value="debug"/>
      <param name="acceptOnMatch" value="true"/>
    </filter>
    <!--
      The DenyAllFilter handles all unmatched statements (i.e., those that
      trigger Filter.NEUTRAL) from the LevelMatchFilter above
     --> 
    <filter class="org.apache.log4j.varia.DenyAllFilter"/>
  </appender>

  <!-- Filter info log messages to the console -->
  <appender name="CONSOLE-INFO" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%-5p - %-30c{1} - %m%n"/>
    </layout>
    <filter class="org.apache.log4j.varia.LevelMatchFilter">
      <param name="levelToMatch" value="info"/>
      <param name="acceptOnMatch" value="true"/>
    </filter>
    <filter class="org.apache.log4j.varia.DenyAllFilter"/>
  </appender>
  
  <logger name="org.apache">
    <level value="WARN"/>
  </logger>
  <logger name="org.springframework">
    <level value="debug"/>
  </logger>
  <logger name="org.apache.activemq">
    <level value="info"/>
  </logger>
  <logger name="org.apache.activemq.store.kahadb">
    <level value="warn"/>
  </logger>
  <logger name="org.apache.activemq.book.ch8">
    <level value="debug"/>
  </logger>
  
  <!-- 
   Comment/uncomment the appender-refs below depending on what kind of
   logging is needed. E.g., uncomment both FILE-DEBUG and FILE-INFO and
   two log files will be created, one for debug log statements and one for
   info log statements. 
  -->
  <root>
    <priority value="debug"/>
    <!--<appender-ref ref="CONSOLE-DEBUG"/>-->
    <appender-ref ref="CONSOLE-INFO"/>
  </root>
  
</log4j:configuration>

<!--

Log4J Configuration Quick Reference:
====================================

Priority order is DEBUG < INFO < WARN < ERROR < FATAL

PatternLayout conversion characters:

%c   Category of the logging event
%C   Fully qualified class name of the caller
%d   Date of the logging event  (example: %d{HH:mm:ss,SSS} )
%F   File name where the logging request was issued (caution: extremely slow)
%l   Location information of the caller (caution: extremely slow)
%L   Line number from where the logging request was issued (caution: extremely slow)
%m   Application-supplied message
%M   Method name from where the logging request was issued (caution: extremely slow)
%n   Line separator
%p   Priority of the logging event
%r   Number of milliseconds since the start of the application
%t   Name of the thread that generated the logging event
%x   Nested diagnostic context associated with the thread
%%   A single percent sign

Format modifiers examples:

%20c   Left pad with spaces if category is less than 20 characters long
%-20c  Right pad with spaces if category is less than 20 characters long
%.30c  Truncate from the beginning if category is more than 30 chars long
%20.30c  Left pad 20 chars + truncate from beginning if more than 30 chars
%-20.30c Right pad 20 chars + truncate from beginning if more than 30 chars

Examples:  "%r [%t] %-5p %c %x - %m\n"
"%-6r [%15.15t] %-5p %30.30c %x - %m\n"

-->
